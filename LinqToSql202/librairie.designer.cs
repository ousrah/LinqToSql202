#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToSql202
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="librairie")]
	public partial class librairieDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertCATALOGUE(CATALOGUE instance);
    partial void UpdateCATALOGUE(CATALOGUE instance);
    partial void DeleteCATALOGUE(CATALOGUE instance);
    partial void InsertTARIFER(TARIFER instance);
    partial void UpdateTARIFER(TARIFER instance);
    partial void DeleteTARIFER(TARIFER instance);
    partial void InsertCLASSIFICATION(CLASSIFICATION instance);
    partial void UpdateCLASSIFICATION(CLASSIFICATION instance);
    partial void DeleteCLASSIFICATION(CLASSIFICATION instance);
    partial void InsertDEPOT(DEPOT instance);
    partial void UpdateDEPOT(DEPOT instance);
    partial void DeleteDEPOT(DEPOT instance);
    partial void InsertECRIRE(ECRIRE instance);
    partial void UpdateECRIRE(ECRIRE instance);
    partial void DeleteECRIRE(ECRIRE instance);
    partial void InsertECRIVAIN(ECRIVAIN instance);
    partial void UpdateECRIVAIN(ECRIVAIN instance);
    partial void DeleteECRIVAIN(ECRIVAIN instance);
    partial void InsertEDITEUR(EDITEUR instance);
    partial void UpdateEDITEUR(EDITEUR instance);
    partial void DeleteEDITEUR(EDITEUR instance);
    partial void InsertOUVRAGE(OUVRAGE instance);
    partial void UpdateOUVRAGE(OUVRAGE instance);
    partial void DeleteOUVRAGE(OUVRAGE instance);
    partial void InsertSTOCKER(STOCKER instance);
    partial void UpdateSTOCKER(STOCKER instance);
    partial void DeleteSTOCKER(STOCKER instance);
    #endregion
		
		public librairieDataContext() : 
				base(global::LinqToSql202.Properties.Settings.Default.librairieConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public librairieDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public librairieDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public librairieDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public librairieDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CATALOGUE> CATALOGUE
		{
			get
			{
				return this.GetTable<CATALOGUE>();
			}
		}
		
		public System.Data.Linq.Table<TARIFER> TARIFER
		{
			get
			{
				return this.GetTable<TARIFER>();
			}
		}
		
		public System.Data.Linq.Table<CLASSIFICATION> CLASSIFICATION
		{
			get
			{
				return this.GetTable<CLASSIFICATION>();
			}
		}
		
		public System.Data.Linq.Table<DEPOT> DEPOT
		{
			get
			{
				return this.GetTable<DEPOT>();
			}
		}
		
		public System.Data.Linq.Table<ECRIRE> ECRIRE
		{
			get
			{
				return this.GetTable<ECRIRE>();
			}
		}
		
		public System.Data.Linq.Table<ECRIVAIN> ECRIVAIN
		{
			get
			{
				return this.GetTable<ECRIVAIN>();
			}
		}
		
		public System.Data.Linq.Table<EDITEUR> EDITEUR
		{
			get
			{
				return this.GetTable<EDITEUR>();
			}
		}
		
		public System.Data.Linq.Table<OUVRAGE> OUVRAGE
		{
			get
			{
				return this.GetTable<OUVRAGE>();
			}
		}
		
		public System.Data.Linq.Table<STOCKER> STOCKER
		{
			get
			{
				return this.GetTable<STOCKER>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CATALOGUE")]
	public partial class CATALOGUE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _DATEDEB;
		
		private System.Nullable<System.DateTime> _DATEFIN;
		
		private EntitySet<TARIFER> _TARIFER;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDATEDEBChanging(System.DateTime value);
    partial void OnDATEDEBChanged();
    partial void OnDATEFINChanging(System.Nullable<System.DateTime> value);
    partial void OnDATEFINChanged();
    #endregion
		
		public CATALOGUE()
		{
			this._TARIFER = new EntitySet<TARIFER>(new Action<TARIFER>(this.attach_TARIFER), new Action<TARIFER>(this.detach_TARIFER));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEDEB", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DATEDEB
		{
			get
			{
				return this._DATEDEB;
			}
			set
			{
				if ((this._DATEDEB != value))
				{
					this.OnDATEDEBChanging(value);
					this.SendPropertyChanging();
					this._DATEDEB = value;
					this.SendPropertyChanged("DATEDEB");
					this.OnDATEDEBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEFIN", DbType="DateTime")]
		public System.Nullable<System.DateTime> DATEFIN
		{
			get
			{
				return this._DATEFIN;
			}
			set
			{
				if ((this._DATEFIN != value))
				{
					this.OnDATEFINChanging(value);
					this.SendPropertyChanging();
					this._DATEFIN = value;
					this.SendPropertyChanged("DATEFIN");
					this.OnDATEFINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATALOGUE_TARIFER", Storage="_TARIFER", ThisKey="DATEDEB", OtherKey="DATEDEB")]
		public EntitySet<TARIFER> TARIFER
		{
			get
			{
				return this._TARIFER;
			}
			set
			{
				this._TARIFER.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TARIFER(TARIFER entity)
		{
			this.SendPropertyChanging();
			entity.CATALOGUE = this;
		}
		
		private void detach_TARIFER(TARIFER entity)
		{
			this.SendPropertyChanging();
			entity.CATALOGUE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TARIFER")]
	public partial class TARIFER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NUMOUVR;
		
		private System.DateTime _DATEDEB;
		
		private System.Nullable<double> _PRIXVENTE;
		
		private EntityRef<CATALOGUE> _CATALOGUE;
		
		private EntityRef<OUVRAGE> _OUVRAGE;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNUMOUVRChanging(int value);
    partial void OnNUMOUVRChanged();
    partial void OnDATEDEBChanging(System.DateTime value);
    partial void OnDATEDEBChanged();
    partial void OnPRIXVENTEChanging(System.Nullable<double> value);
    partial void OnPRIXVENTEChanged();
    #endregion
		
		public TARIFER()
		{
			this._CATALOGUE = default(EntityRef<CATALOGUE>);
			this._OUVRAGE = default(EntityRef<OUVRAGE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMOUVR", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NUMOUVR
		{
			get
			{
				return this._NUMOUVR;
			}
			set
			{
				if ((this._NUMOUVR != value))
				{
					if (this._OUVRAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNUMOUVRChanging(value);
					this.SendPropertyChanging();
					this._NUMOUVR = value;
					this.SendPropertyChanged("NUMOUVR");
					this.OnNUMOUVRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEDEB", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DATEDEB
		{
			get
			{
				return this._DATEDEB;
			}
			set
			{
				if ((this._DATEDEB != value))
				{
					if (this._CATALOGUE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDATEDEBChanging(value);
					this.SendPropertyChanging();
					this._DATEDEB = value;
					this.SendPropertyChanged("DATEDEB");
					this.OnDATEDEBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRIXVENTE", DbType="Float")]
		public System.Nullable<double> PRIXVENTE
		{
			get
			{
				return this._PRIXVENTE;
			}
			set
			{
				if ((this._PRIXVENTE != value))
				{
					this.OnPRIXVENTEChanging(value);
					this.SendPropertyChanging();
					this._PRIXVENTE = value;
					this.SendPropertyChanged("PRIXVENTE");
					this.OnPRIXVENTEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATALOGUE_TARIFER", Storage="_CATALOGUE", ThisKey="DATEDEB", OtherKey="DATEDEB", IsForeignKey=true)]
		public CATALOGUE CATALOGUE
		{
			get
			{
				return this._CATALOGUE.Entity;
			}
			set
			{
				CATALOGUE previousValue = this._CATALOGUE.Entity;
				if (((previousValue != value) 
							|| (this._CATALOGUE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CATALOGUE.Entity = null;
						previousValue.TARIFER.Remove(this);
					}
					this._CATALOGUE.Entity = value;
					if ((value != null))
					{
						value.TARIFER.Add(this);
						this._DATEDEB = value.DATEDEB;
					}
					else
					{
						this._DATEDEB = default(System.DateTime);
					}
					this.SendPropertyChanged("CATALOGUE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OUVRAGE_TARIFER", Storage="_OUVRAGE", ThisKey="NUMOUVR", OtherKey="NUMOUVR", IsForeignKey=true)]
		public OUVRAGE OUVRAGE
		{
			get
			{
				return this._OUVRAGE.Entity;
			}
			set
			{
				OUVRAGE previousValue = this._OUVRAGE.Entity;
				if (((previousValue != value) 
							|| (this._OUVRAGE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OUVRAGE.Entity = null;
						previousValue.TARIFER.Remove(this);
					}
					this._OUVRAGE.Entity = value;
					if ((value != null))
					{
						value.TARIFER.Add(this);
						this._NUMOUVR = value.NUMOUVR;
					}
					else
					{
						this._NUMOUVR = default(int);
					}
					this.SendPropertyChanged("OUVRAGE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CLASSIFICATION")]
	public partial class CLASSIFICATION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NUMRUB;
		
		private string _LIBRUB;
		
		private EntitySet<OUVRAGE> _OUVRAGE;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNUMRUBChanging(int value);
    partial void OnNUMRUBChanged();
    partial void OnLIBRUBChanging(string value);
    partial void OnLIBRUBChanged();
    #endregion
		
		public CLASSIFICATION()
		{
			this._OUVRAGE = new EntitySet<OUVRAGE>(new Action<OUVRAGE>(this.attach_OUVRAGE), new Action<OUVRAGE>(this.detach_OUVRAGE));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMRUB", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NUMRUB
		{
			get
			{
				return this._NUMRUB;
			}
			set
			{
				if ((this._NUMRUB != value))
				{
					this.OnNUMRUBChanging(value);
					this.SendPropertyChanging();
					this._NUMRUB = value;
					this.SendPropertyChanged("NUMRUB");
					this.OnNUMRUBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LIBRUB", DbType="VarChar(50)")]
		public string LIBRUB
		{
			get
			{
				return this._LIBRUB;
			}
			set
			{
				if ((this._LIBRUB != value))
				{
					this.OnLIBRUBChanging(value);
					this.SendPropertyChanging();
					this._LIBRUB = value;
					this.SendPropertyChanged("LIBRUB");
					this.OnLIBRUBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASSIFICATION_OUVRAGE", Storage="_OUVRAGE", ThisKey="NUMRUB", OtherKey="NUMRUB")]
		public EntitySet<OUVRAGE> OUVRAGE
		{
			get
			{
				return this._OUVRAGE;
			}
			set
			{
				this._OUVRAGE.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OUVRAGE(OUVRAGE entity)
		{
			this.SendPropertyChanging();
			entity.CLASSIFICATION = this;
		}
		
		private void detach_OUVRAGE(OUVRAGE entity)
		{
			this.SendPropertyChanging();
			entity.CLASSIFICATION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DEPOT")]
	public partial class DEPOT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NUMDEP;
		
		private string _NOMDEP;
		
		private string _ADRDEP;
		
		private string _CPDEP;
		
		private string _VILLEDEP;
		
		private EntitySet<STOCKER> _STOCKER;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNUMDEPChanging(int value);
    partial void OnNUMDEPChanged();
    partial void OnNOMDEPChanging(string value);
    partial void OnNOMDEPChanged();
    partial void OnADRDEPChanging(string value);
    partial void OnADRDEPChanged();
    partial void OnCPDEPChanging(string value);
    partial void OnCPDEPChanged();
    partial void OnVILLEDEPChanging(string value);
    partial void OnVILLEDEPChanged();
    #endregion
		
		public DEPOT()
		{
			this._STOCKER = new EntitySet<STOCKER>(new Action<STOCKER>(this.attach_STOCKER), new Action<STOCKER>(this.detach_STOCKER));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMDEP", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NUMDEP
		{
			get
			{
				return this._NUMDEP;
			}
			set
			{
				if ((this._NUMDEP != value))
				{
					this.OnNUMDEPChanging(value);
					this.SendPropertyChanging();
					this._NUMDEP = value;
					this.SendPropertyChanged("NUMDEP");
					this.OnNUMDEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOMDEP", DbType="VarChar(30)")]
		public string NOMDEP
		{
			get
			{
				return this._NOMDEP;
			}
			set
			{
				if ((this._NOMDEP != value))
				{
					this.OnNOMDEPChanging(value);
					this.SendPropertyChanging();
					this._NOMDEP = value;
					this.SendPropertyChanged("NOMDEP");
					this.OnNOMDEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADRDEP", DbType="VarChar(40)")]
		public string ADRDEP
		{
			get
			{
				return this._ADRDEP;
			}
			set
			{
				if ((this._ADRDEP != value))
				{
					this.OnADRDEPChanging(value);
					this.SendPropertyChanging();
					this._ADRDEP = value;
					this.SendPropertyChanged("ADRDEP");
					this.OnADRDEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPDEP", DbType="VarChar(5)")]
		public string CPDEP
		{
			get
			{
				return this._CPDEP;
			}
			set
			{
				if ((this._CPDEP != value))
				{
					this.OnCPDEPChanging(value);
					this.SendPropertyChanging();
					this._CPDEP = value;
					this.SendPropertyChanged("CPDEP");
					this.OnCPDEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VILLEDEP", DbType="VarChar(30)")]
		public string VILLEDEP
		{
			get
			{
				return this._VILLEDEP;
			}
			set
			{
				if ((this._VILLEDEP != value))
				{
					this.OnVILLEDEPChanging(value);
					this.SendPropertyChanging();
					this._VILLEDEP = value;
					this.SendPropertyChanged("VILLEDEP");
					this.OnVILLEDEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPOT_STOCKER", Storage="_STOCKER", ThisKey="NUMDEP", OtherKey="NUMDEP")]
		public EntitySet<STOCKER> STOCKER
		{
			get
			{
				return this._STOCKER;
			}
			set
			{
				this._STOCKER.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_STOCKER(STOCKER entity)
		{
			this.SendPropertyChanging();
			entity.DEPOT = this;
		}
		
		private void detach_STOCKER(STOCKER entity)
		{
			this.SendPropertyChanging();
			entity.DEPOT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ECRIRE")]
	public partial class ECRIRE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NUMOUVR;
		
		private int _NUMECR;
		
		private EntityRef<ECRIVAIN> _ECRIVAIN;
		
		private EntityRef<OUVRAGE> _OUVRAGE;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNUMOUVRChanging(int value);
    partial void OnNUMOUVRChanged();
    partial void OnNUMECRChanging(int value);
    partial void OnNUMECRChanged();
    #endregion
		
		public ECRIRE()
		{
			this._ECRIVAIN = default(EntityRef<ECRIVAIN>);
			this._OUVRAGE = default(EntityRef<OUVRAGE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMOUVR", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NUMOUVR
		{
			get
			{
				return this._NUMOUVR;
			}
			set
			{
				if ((this._NUMOUVR != value))
				{
					if (this._OUVRAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNUMOUVRChanging(value);
					this.SendPropertyChanging();
					this._NUMOUVR = value;
					this.SendPropertyChanged("NUMOUVR");
					this.OnNUMOUVRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMECR", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NUMECR
		{
			get
			{
				return this._NUMECR;
			}
			set
			{
				if ((this._NUMECR != value))
				{
					if (this._ECRIVAIN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNUMECRChanging(value);
					this.SendPropertyChanging();
					this._NUMECR = value;
					this.SendPropertyChanged("NUMECR");
					this.OnNUMECRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ECRIVAIN_ECRIRE", Storage="_ECRIVAIN", ThisKey="NUMECR", OtherKey="NUMECR", IsForeignKey=true)]
		public ECRIVAIN ECRIVAIN
		{
			get
			{
				return this._ECRIVAIN.Entity;
			}
			set
			{
				ECRIVAIN previousValue = this._ECRIVAIN.Entity;
				if (((previousValue != value) 
							|| (this._ECRIVAIN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ECRIVAIN.Entity = null;
						previousValue.ECRIRE.Remove(this);
					}
					this._ECRIVAIN.Entity = value;
					if ((value != null))
					{
						value.ECRIRE.Add(this);
						this._NUMECR = value.NUMECR;
					}
					else
					{
						this._NUMECR = default(int);
					}
					this.SendPropertyChanged("ECRIVAIN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OUVRAGE_ECRIRE", Storage="_OUVRAGE", ThisKey="NUMOUVR", OtherKey="NUMOUVR", IsForeignKey=true)]
		public OUVRAGE OUVRAGE
		{
			get
			{
				return this._OUVRAGE.Entity;
			}
			set
			{
				OUVRAGE previousValue = this._OUVRAGE.Entity;
				if (((previousValue != value) 
							|| (this._OUVRAGE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OUVRAGE.Entity = null;
						previousValue.ECRIRE.Remove(this);
					}
					this._OUVRAGE.Entity = value;
					if ((value != null))
					{
						value.ECRIRE.Add(this);
						this._NUMOUVR = value.NUMOUVR;
					}
					else
					{
						this._NUMOUVR = default(int);
					}
					this.SendPropertyChanged("OUVRAGE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ECRIVAIN")]
	public partial class ECRIVAIN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NUMECR;
		
		private string _PRENOMECR;
		
		private string _NOMECR;
		
		private string _PAYSECR;
		
		private string _LANGUECR;
		
		private EntitySet<ECRIRE> _ECRIRE;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNUMECRChanging(int value);
    partial void OnNUMECRChanged();
    partial void OnPRENOMECRChanging(string value);
    partial void OnPRENOMECRChanged();
    partial void OnNOMECRChanging(string value);
    partial void OnNOMECRChanged();
    partial void OnPAYSECRChanging(string value);
    partial void OnPAYSECRChanged();
    partial void OnLANGUECRChanging(string value);
    partial void OnLANGUECRChanged();
    #endregion
		
		public ECRIVAIN()
		{
			this._ECRIRE = new EntitySet<ECRIRE>(new Action<ECRIRE>(this.attach_ECRIRE), new Action<ECRIRE>(this.detach_ECRIRE));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMECR", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NUMECR
		{
			get
			{
				return this._NUMECR;
			}
			set
			{
				if ((this._NUMECR != value))
				{
					this.OnNUMECRChanging(value);
					this.SendPropertyChanging();
					this._NUMECR = value;
					this.SendPropertyChanged("NUMECR");
					this.OnNUMECRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRENOMECR", DbType="VarChar(30)")]
		public string PRENOMECR
		{
			get
			{
				return this._PRENOMECR;
			}
			set
			{
				if ((this._PRENOMECR != value))
				{
					this.OnPRENOMECRChanging(value);
					this.SendPropertyChanging();
					this._PRENOMECR = value;
					this.SendPropertyChanged("PRENOMECR");
					this.OnPRENOMECRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOMECR", DbType="VarChar(30)")]
		public string NOMECR
		{
			get
			{
				return this._NOMECR;
			}
			set
			{
				if ((this._NOMECR != value))
				{
					this.OnNOMECRChanging(value);
					this.SendPropertyChanging();
					this._NOMECR = value;
					this.SendPropertyChanged("NOMECR");
					this.OnNOMECRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAYSECR", DbType="VarChar(30)")]
		public string PAYSECR
		{
			get
			{
				return this._PAYSECR;
			}
			set
			{
				if ((this._PAYSECR != value))
				{
					this.OnPAYSECRChanging(value);
					this.SendPropertyChanging();
					this._PAYSECR = value;
					this.SendPropertyChanged("PAYSECR");
					this.OnPAYSECRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LANGUECR", DbType="VarChar(30)")]
		public string LANGUECR
		{
			get
			{
				return this._LANGUECR;
			}
			set
			{
				if ((this._LANGUECR != value))
				{
					this.OnLANGUECRChanging(value);
					this.SendPropertyChanging();
					this._LANGUECR = value;
					this.SendPropertyChanged("LANGUECR");
					this.OnLANGUECRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ECRIVAIN_ECRIRE", Storage="_ECRIRE", ThisKey="NUMECR", OtherKey="NUMECR")]
		public EntitySet<ECRIRE> ECRIRE
		{
			get
			{
				return this._ECRIRE;
			}
			set
			{
				this._ECRIRE.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ECRIRE(ECRIRE entity)
		{
			this.SendPropertyChanging();
			entity.ECRIVAIN = this;
		}
		
		private void detach_ECRIRE(ECRIRE entity)
		{
			this.SendPropertyChanging();
			entity.ECRIVAIN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EDITEUR")]
	public partial class EDITEUR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _NOMED;
		
		private string _ADRED;
		
		private string _CPED;
		
		private string _VILLEED;
		
		private string _TELED;
		
		private EntitySet<OUVRAGE> _OUVRAGE;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNOMEDChanging(string value);
    partial void OnNOMEDChanged();
    partial void OnADREDChanging(string value);
    partial void OnADREDChanged();
    partial void OnCPEDChanging(string value);
    partial void OnCPEDChanged();
    partial void OnVILLEEDChanging(string value);
    partial void OnVILLEEDChanged();
    partial void OnTELEDChanging(string value);
    partial void OnTELEDChanged();
    #endregion
		
		public EDITEUR()
		{
			this._OUVRAGE = new EntitySet<OUVRAGE>(new Action<OUVRAGE>(this.attach_OUVRAGE), new Action<OUVRAGE>(this.detach_OUVRAGE));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOMED", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string NOMED
		{
			get
			{
				return this._NOMED;
			}
			set
			{
				if ((this._NOMED != value))
				{
					this.OnNOMEDChanging(value);
					this.SendPropertyChanging();
					this._NOMED = value;
					this.SendPropertyChanged("NOMED");
					this.OnNOMEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADRED", DbType="VarChar(40)")]
		public string ADRED
		{
			get
			{
				return this._ADRED;
			}
			set
			{
				if ((this._ADRED != value))
				{
					this.OnADREDChanging(value);
					this.SendPropertyChanging();
					this._ADRED = value;
					this.SendPropertyChanged("ADRED");
					this.OnADREDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPED", DbType="NVarChar(5)")]
		public string CPED
		{
			get
			{
				return this._CPED;
			}
			set
			{
				if ((this._CPED != value))
				{
					this.OnCPEDChanging(value);
					this.SendPropertyChanging();
					this._CPED = value;
					this.SendPropertyChanged("CPED");
					this.OnCPEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VILLEED", DbType="NVarChar(30)")]
		public string VILLEED
		{
			get
			{
				return this._VILLEED;
			}
			set
			{
				if ((this._VILLEED != value))
				{
					this.OnVILLEEDChanging(value);
					this.SendPropertyChanging();
					this._VILLEED = value;
					this.SendPropertyChanged("VILLEED");
					this.OnVILLEEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TELED", DbType="NVarChar(16)")]
		public string TELED
		{
			get
			{
				return this._TELED;
			}
			set
			{
				if ((this._TELED != value))
				{
					this.OnTELEDChanging(value);
					this.SendPropertyChanging();
					this._TELED = value;
					this.SendPropertyChanged("TELED");
					this.OnTELEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EDITEUR_OUVRAGE", Storage="_OUVRAGE", ThisKey="NOMED", OtherKey="NOMED")]
		public EntitySet<OUVRAGE> OUVRAGE
		{
			get
			{
				return this._OUVRAGE;
			}
			set
			{
				this._OUVRAGE.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OUVRAGE(OUVRAGE entity)
		{
			this.SendPropertyChanging();
			entity.EDITEUR = this;
		}
		
		private void detach_OUVRAGE(OUVRAGE entity)
		{
			this.SendPropertyChanging();
			entity.EDITEUR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OUVRAGE")]
	public partial class OUVRAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NUMOUVR;
		
		private string _NOMOUVR;
		
		private System.Nullable<short> _ANNEEPARU;
		
		private System.Nullable<int> _NUMRUB;
		
		private string _NOMED;
		
		private EntitySet<TARIFER> _TARIFER;
		
		private EntitySet<ECRIRE> _ECRIRE;
		
		private EntitySet<STOCKER> _STOCKER;
		
		private EntityRef<CLASSIFICATION> _CLASSIFICATION;
		
		private EntityRef<EDITEUR> _EDITEUR;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNUMOUVRChanging(int value);
    partial void OnNUMOUVRChanged();
    partial void OnNOMOUVRChanging(string value);
    partial void OnNOMOUVRChanged();
    partial void OnANNEEPARUChanging(System.Nullable<short> value);
    partial void OnANNEEPARUChanged();
    partial void OnNUMRUBChanging(System.Nullable<int> value);
    partial void OnNUMRUBChanged();
    partial void OnNOMEDChanging(string value);
    partial void OnNOMEDChanged();
    #endregion
		
		public OUVRAGE()
		{
			this._TARIFER = new EntitySet<TARIFER>(new Action<TARIFER>(this.attach_TARIFER), new Action<TARIFER>(this.detach_TARIFER));
			this._ECRIRE = new EntitySet<ECRIRE>(new Action<ECRIRE>(this.attach_ECRIRE), new Action<ECRIRE>(this.detach_ECRIRE));
			this._STOCKER = new EntitySet<STOCKER>(new Action<STOCKER>(this.attach_STOCKER), new Action<STOCKER>(this.detach_STOCKER));
			this._CLASSIFICATION = default(EntityRef<CLASSIFICATION>);
			this._EDITEUR = default(EntityRef<EDITEUR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMOUVR", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NUMOUVR
		{
			get
			{
				return this._NUMOUVR;
			}
			set
			{
				if ((this._NUMOUVR != value))
				{
					this.OnNUMOUVRChanging(value);
					this.SendPropertyChanging();
					this._NUMOUVR = value;
					this.SendPropertyChanged("NUMOUVR");
					this.OnNUMOUVRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOMOUVR", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string NOMOUVR
		{
			get
			{
				return this._NOMOUVR;
			}
			set
			{
				if ((this._NOMOUVR != value))
				{
					this.OnNOMOUVRChanging(value);
					this.SendPropertyChanging();
					this._NOMOUVR = value;
					this.SendPropertyChanged("NOMOUVR");
					this.OnNOMOUVRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ANNEEPARU", DbType="SmallInt")]
		public System.Nullable<short> ANNEEPARU
		{
			get
			{
				return this._ANNEEPARU;
			}
			set
			{
				if ((this._ANNEEPARU != value))
				{
					this.OnANNEEPARUChanging(value);
					this.SendPropertyChanging();
					this._ANNEEPARU = value;
					this.SendPropertyChanged("ANNEEPARU");
					this.OnANNEEPARUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMRUB", DbType="Int")]
		public System.Nullable<int> NUMRUB
		{
			get
			{
				return this._NUMRUB;
			}
			set
			{
				if ((this._NUMRUB != value))
				{
					if (this._CLASSIFICATION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNUMRUBChanging(value);
					this.SendPropertyChanging();
					this._NUMRUB = value;
					this.SendPropertyChanged("NUMRUB");
					this.OnNUMRUBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOMED", DbType="VarChar(30)")]
		public string NOMED
		{
			get
			{
				return this._NOMED;
			}
			set
			{
				if ((this._NOMED != value))
				{
					if (this._EDITEUR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNOMEDChanging(value);
					this.SendPropertyChanging();
					this._NOMED = value;
					this.SendPropertyChanged("NOMED");
					this.OnNOMEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OUVRAGE_TARIFER", Storage="_TARIFER", ThisKey="NUMOUVR", OtherKey="NUMOUVR")]
		public EntitySet<TARIFER> TARIFER
		{
			get
			{
				return this._TARIFER;
			}
			set
			{
				this._TARIFER.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OUVRAGE_ECRIRE", Storage="_ECRIRE", ThisKey="NUMOUVR", OtherKey="NUMOUVR")]
		public EntitySet<ECRIRE> ECRIRE
		{
			get
			{
				return this._ECRIRE;
			}
			set
			{
				this._ECRIRE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OUVRAGE_STOCKER", Storage="_STOCKER", ThisKey="NUMOUVR", OtherKey="NUMOUVR")]
		public EntitySet<STOCKER> STOCKER
		{
			get
			{
				return this._STOCKER;
			}
			set
			{
				this._STOCKER.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASSIFICATION_OUVRAGE", Storage="_CLASSIFICATION", ThisKey="NUMRUB", OtherKey="NUMRUB", IsForeignKey=true)]
		public CLASSIFICATION CLASSIFICATION
		{
			get
			{
				return this._CLASSIFICATION.Entity;
			}
			set
			{
				CLASSIFICATION previousValue = this._CLASSIFICATION.Entity;
				if (((previousValue != value) 
							|| (this._CLASSIFICATION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLASSIFICATION.Entity = null;
						previousValue.OUVRAGE.Remove(this);
					}
					this._CLASSIFICATION.Entity = value;
					if ((value != null))
					{
						value.OUVRAGE.Add(this);
						this._NUMRUB = value.NUMRUB;
					}
					else
					{
						this._NUMRUB = default(Nullable<int>);
					}
					this.SendPropertyChanged("CLASSIFICATION");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EDITEUR_OUVRAGE", Storage="_EDITEUR", ThisKey="NOMED", OtherKey="NOMED", IsForeignKey=true)]
		public EDITEUR EDITEUR
		{
			get
			{
				return this._EDITEUR.Entity;
			}
			set
			{
				EDITEUR previousValue = this._EDITEUR.Entity;
				if (((previousValue != value) 
							|| (this._EDITEUR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EDITEUR.Entity = null;
						previousValue.OUVRAGE.Remove(this);
					}
					this._EDITEUR.Entity = value;
					if ((value != null))
					{
						value.OUVRAGE.Add(this);
						this._NOMED = value.NOMED;
					}
					else
					{
						this._NOMED = default(string);
					}
					this.SendPropertyChanged("EDITEUR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TARIFER(TARIFER entity)
		{
			this.SendPropertyChanging();
			entity.OUVRAGE = this;
		}
		
		private void detach_TARIFER(TARIFER entity)
		{
			this.SendPropertyChanging();
			entity.OUVRAGE = null;
		}
		
		private void attach_ECRIRE(ECRIRE entity)
		{
			this.SendPropertyChanging();
			entity.OUVRAGE = this;
		}
		
		private void detach_ECRIRE(ECRIRE entity)
		{
			this.SendPropertyChanging();
			entity.OUVRAGE = null;
		}
		
		private void attach_STOCKER(STOCKER entity)
		{
			this.SendPropertyChanging();
			entity.OUVRAGE = this;
		}
		
		private void detach_STOCKER(STOCKER entity)
		{
			this.SendPropertyChanging();
			entity.OUVRAGE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STOCKER")]
	public partial class STOCKER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NUMOUVR;
		
		private int _NUMDEP;
		
		private System.Nullable<int> _QTESTOCK;
		
		private EntityRef<DEPOT> _DEPOT;
		
		private EntityRef<OUVRAGE> _OUVRAGE;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNUMOUVRChanging(int value);
    partial void OnNUMOUVRChanged();
    partial void OnNUMDEPChanging(int value);
    partial void OnNUMDEPChanged();
    partial void OnQTESTOCKChanging(System.Nullable<int> value);
    partial void OnQTESTOCKChanged();
    #endregion
		
		public STOCKER()
		{
			this._DEPOT = default(EntityRef<DEPOT>);
			this._OUVRAGE = default(EntityRef<OUVRAGE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMOUVR", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NUMOUVR
		{
			get
			{
				return this._NUMOUVR;
			}
			set
			{
				if ((this._NUMOUVR != value))
				{
					if (this._OUVRAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNUMOUVRChanging(value);
					this.SendPropertyChanging();
					this._NUMOUVR = value;
					this.SendPropertyChanged("NUMOUVR");
					this.OnNUMOUVRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMDEP", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NUMDEP
		{
			get
			{
				return this._NUMDEP;
			}
			set
			{
				if ((this._NUMDEP != value))
				{
					if (this._DEPOT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNUMDEPChanging(value);
					this.SendPropertyChanging();
					this._NUMDEP = value;
					this.SendPropertyChanged("NUMDEP");
					this.OnNUMDEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QTESTOCK", DbType="Int")]
		public System.Nullable<int> QTESTOCK
		{
			get
			{
				return this._QTESTOCK;
			}
			set
			{
				if ((this._QTESTOCK != value))
				{
					this.OnQTESTOCKChanging(value);
					this.SendPropertyChanging();
					this._QTESTOCK = value;
					this.SendPropertyChanged("QTESTOCK");
					this.OnQTESTOCKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPOT_STOCKER", Storage="_DEPOT", ThisKey="NUMDEP", OtherKey="NUMDEP", IsForeignKey=true)]
		public DEPOT DEPOT
		{
			get
			{
				return this._DEPOT.Entity;
			}
			set
			{
				DEPOT previousValue = this._DEPOT.Entity;
				if (((previousValue != value) 
							|| (this._DEPOT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DEPOT.Entity = null;
						previousValue.STOCKER.Remove(this);
					}
					this._DEPOT.Entity = value;
					if ((value != null))
					{
						value.STOCKER.Add(this);
						this._NUMDEP = value.NUMDEP;
					}
					else
					{
						this._NUMDEP = default(int);
					}
					this.SendPropertyChanged("DEPOT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OUVRAGE_STOCKER", Storage="_OUVRAGE", ThisKey="NUMOUVR", OtherKey="NUMOUVR", IsForeignKey=true)]
		public OUVRAGE OUVRAGE
		{
			get
			{
				return this._OUVRAGE.Entity;
			}
			set
			{
				OUVRAGE previousValue = this._OUVRAGE.Entity;
				if (((previousValue != value) 
							|| (this._OUVRAGE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OUVRAGE.Entity = null;
						previousValue.STOCKER.Remove(this);
					}
					this._OUVRAGE.Entity = value;
					if ((value != null))
					{
						value.STOCKER.Add(this);
						this._NUMOUVR = value.NUMOUVR;
					}
					else
					{
						this._NUMOUVR = default(int);
					}
					this.SendPropertyChanged("OUVRAGE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
